import timeit
import numpy as np
from matplotlib import pyplot as plt

n = 0

def nearest(x1,pts):
    best_distance = None
    best_point = None
    i = 0
    ind = 0
    for pt in pts:
        cur_dist = ((x1[0] - pt[0])**2 + (x1[1] - pt[1])**2)**0.5
        if best_distance == None or cur_dist < best_distance :
            ind = i
            best_point = pt
            best_distance = cur_dist
        i = i+1
    return ind,best_distance
def query(srclist,trlist):
    distancelist = []
    indexlist = []
    for p_t in srclist:
        a,b = nearest(p_t,trlist)
        distancelist.append(b)
        indexlist.append(a)
    return indexlist,distancelist
def outlierrejection(srclist,trlist):
    srclist = np.array(srclist)
    trlist = np.array(trlist)
    brute_match = srclist[:,:2]
    indices , dist = query(brute_match,trlist[:,:2])
    unique = False
    while not unique:
        unique = True
        for i in range(len(indices)):
            if indices[i] == -1:
                continue
            for j in range(i + 1, len(indices)):
                if indices[i] == indices[j]:
                    if dist[i] < dist[j]:
                        indices[j] = -1
                    else:
                        indices[i] = -1
                        break
    point_list = []
    src_idx = 0
    for idx in indices:
        if idx != -1:
            point_list.append(trlist[idx, :])
            src_idx += 1
        else:
            brute_match = np.delete(brute_match, src_idx, axis=0)

    matched_pts = np.array(point_list)

    return matched_pts[:, :2], brute_match, indices






def main():

    init_A = np.eye(3)

    points_prime_t = [(-2.2541122234542854e-05, -6.226846218109131, 0.0), (0.24891646206378937, -6.256628513336182, 0.0), (0.49543043971061707, -6.21629524230957, 0.0), (0.7458614110946655, -6.222416400909424, 0.0), (0.9955333471298218, -6.205793857574463, 0.0), (1.2514573335647583, -6.210886478424072, 0.0), (1.5136431455612183, -6.223036766052246, 0.0), (1.773485541343689, -6.2056403160095215, 0.0), (2.0439629554748535, -6.206639766693115, 0.0), (2.3216779232025146, -6.207571983337402, 0.0), (2.6074979305267334, -6.207644939422607, 0.0), (2.822584390640259, -6.0356764793396, 0.0), (2.833462715148926, -5.4799604415893555, 0.0), (2.8218326568603516, -4.963265419006348, 0.0), (2.817556142807007, -4.526839256286621, 0.0), (2.8124642372131348, -4.141976833343506, 0.0), (2.8107495307922363, -3.804676055908203, 0.0), (2.805089235305786, -3.497061252593994, 0.0), (2.813107490539551, -3.2346789836883545, 0.0), (2.804293394088745, -2.9767768383026123, 0.0), (2.8087081909179688, -2.7534186840057373, 0.0), (2.80316424369812, -2.537477493286133, 0.0), (2.8055593967437744, -2.3436083793640137, 0.0), (2.8079326152801514, -2.162010431289673, 0.0), (2.8143906593322754, -1.9939191341400146, 0.0), (2.8143327236175537, -1.8303072452545166, 0.0), (2.8145763874053955, -1.6751328706741333, 0.0), (2.806795120239258, -1.5227651596069336, 0.0), (2.815809965133667, -1.385708212852478, 0.0), (2.8084731101989746, -1.2459574937820435, 0.0), (2.805471658706665, -1.113349199295044, 0.0), (2.8105475902557373, -0.9879379272460938, 0.0), (2.8167169094085693, -0.865924060344696, 0.0), (2.8125460147857666, -0.7436400055885315, 0.0), (2.8160505294799805, -0.6259365677833557, 0.0), (2.8108069896698, -0.5084379315376282, 0.0), (2.7997546195983887, -0.39221903681755066, 0.0), (2.805360794067383, -0.27982479333877563, 0.0), (2.8191943168640137, -0.16836613416671753, 0.0), (2.793386697769165, -0.05554942041635513, 0.0), (2.810610294342041, 0.055892594158649445, 0.0), (2.800051212310791, 0.16722354292869568, 0.0), (2.797532081604004, 0.27904456853866577, 0.0), (2.80890154838562, 0.3935011029243469, 0.0), (2.7935092449188232, 0.5053096413612366, 0.0), (2.816277027130127, 0.6259876489639282, 0.0), (2.8126728534698486, 0.7436742782592773, 0.0), (2.790456533432007, 0.8578516840934753, 0.0), (2.795827865600586, 0.9827645421028137, 0.0), (2.799292802810669, 1.1108978986740112, 0.0), (2.797888994216919, 1.2412627935409546, 0.0), (2.780109405517578, 1.3681402206420898, 0.0), (2.804016590118408, 1.5212584733963013, 0.0), (2.7905898094177246, 1.660857915878296, 0.0), (2.7946324348449707, 1.8174959421157837, 0.0), (2.7867989540100098, 1.974372148513794, 0.0), (2.796051263809204, 2.1528632640838623, 0.0), (2.795804262161255, 2.335460662841797, 0.0), (2.79565167427063, 2.5306782722473145, 0.0), (2.7819976806640625, 2.7272353172302246, 0.0), (2.787518262863159, 2.9589712619781494, 0.0), (2.785477876663208, 3.2029104232788086, 0.0), (2.7771549224853516, 3.4622373580932617, 0.0), (2.771301031112671, 3.751279592514038, 0.0), (2.7738025188446045, 4.085041522979736, 0.0), (2.7562692165374756, 4.428374767303467, 0.0), (2.774522542953491, 4.8800554275512695, 0.0), (2.7583234310150146, 5.3346428871154785, 0.0), (2.7058558464050293, 5.786073207855225, 0.0), (2.427443265914917, 5.778994560241699, 0.0), (2.1705329418182373, 5.803452491760254, 0.0), (1.9093601703643799, 5.797913074493408, 0.0), (1.6572589874267578, 5.798954963684082, 0.0), (1.407502293586731, 5.786665916442871, 0.0), (1.1662383079528809, 5.787958145141602, 0.0), (0.9317261576652527, 5.808051586151123, 0.0), (0.6952478885650635, 5.800179958343506, 0.0), (0.46153706312179565, 5.791043281555176, 0.0), (0.23047609627246857, 5.793155670166016, 0.0), (-2.2434764105128124e-05, 5.820131301879883, 0.0)]
    points_s_1 = [(-2.4062519514700398e-05, -6.647122859954834, 0.0), (0.2417224943637848, -6.075804710388184, 0.0), (0.4446604251861572, -5.579270839691162, 0.0), (0.6186502575874329, -5.1611456871032715, 0.0), (0.7717474102973938, -4.810793399810791, 0.0), (0.9045416116714478, -4.489170551300049, 0.0), (1.0237642526626587, -4.208999156951904, 0.0), (1.1275392770767212, -3.9453964233398438, 0.0), (1.2219995260238647, -3.710689067840576, 0.0), (1.3116647005081177, -3.5070550441741943, 0.0), (1.3856054544448853, -3.2986974716186523, 0.0), (1.4668387174606323, -3.1366162300109863, 0.0), (1.548624038696289, -2.995062828063965, 0.0), (1.6113773584365845, -2.8342196941375732, 0.0), (1.6659342050552368, -2.6765806674957275, 0.0), (1.7347735166549683, -2.5548386573791504, 0.0), (1.7877795696258545, -2.4199671745300293, 0.0), (1.8237800598144531, -2.2736783027648926, 0.0), (1.894470453262329, -2.178375244140625, 0.0), (1.9245610237121582, -2.0429348945617676, 0.0), (1.969214677810669, -1.930450677871704, 0.0), (2.017550230026245, -1.8263248205184937, 0.0), (2.0834121704101562, -1.7403666973114014, 0.0), (2.10880708694458, -1.6237080097198486, 0.0), (2.158879518508911, -1.5295073986053467, 0.0), (2.183122396469116, -1.4197982549667358, 0.0), (2.2127015590667725, -1.316918969154358, 0.0), (2.263475179672241, -1.2279987335205078, 0.0), (2.296048164367676, -1.1299245357513428, 0.0), (2.343933582305908, -1.0398681163787842, 0.0), (2.3735687732696533, -0.9419488906860352, 0.0), (2.4185099601745605, -0.8501324653625488, 0.0), (2.4667346477508545, -0.7583313584327698, 0.0), (2.521789073944092, -0.6667636036872864, 0.0), (2.564918279647827, -0.5701162219047546, 0.0), (2.587278366088867, -0.4680045247077942, 0.0), (2.637565851211548, -0.3694979250431061, 0.0), (2.6759164333343506, -0.26691317558288574, 0.0), (2.701120138168335, -0.16131459176540375, 0.0), (2.7633564472198486, -0.054952241480350494, 0.0), (2.803485870361328, 0.05575091391801834, 0.0), (2.860523223876953, 0.17083503305912018, 0.0), (2.9270968437194824, 0.2919682264328003, 0.0), (2.9728970527648926, 0.4164753258228302, 0.0), (3.0217342376708984, 0.546592652797699, 0.0), (3.068809986114502, 0.6821193695068359, 0.0), (3.1243789196014404, 0.8260897397994995, 0.0), (3.1809327602386475, 0.9778932929039001, 0.0), (3.2617757320404053, 1.1465504169464111, 0.0), (3.3323004245758057, 1.322421669960022, 0.0), (3.3911213874816895, 1.5044459104537964, 0.0), (3.4837417602539062, 1.7144098281860352, 0.0), (3.6031014919281006, 1.954784870147705, 0.0), (3.7003891468048096, 2.2023375034332275, 0.0), (3.8097307682037354, 2.4776675701141357, 0.0), (3.9570157527923584, 2.8034393787384033, 0.0), (4.074550151824951, 3.137263298034668, 0.0), (4.260561466217041, 3.559037923812866, 0.0), (4.465435028076172, 4.042198657989502, 0.0), (4.396158695220947, 4.309622287750244, 0.0), (4.159643650054932, 4.415493011474609, 0.0), (3.92864727973938, 4.517395496368408, 0.0), (3.6979143619537354, 4.610134601593018, 0.0), (3.4674079418182373, 4.693541526794434, 0.0), (3.2521162033081055, 4.789464473724365, 0.0), (3.032783031463623, 4.8726372718811035, 0.0), (2.8257570266723633, 4.970170974731445, 0.0), (2.6233208179473877, 5.073545455932617, 0.0), (2.4169468879699707, 5.168283939361572, 0.0), (2.2090084552764893, 5.258968830108643, 0.0), (1.9963998794555664, 5.337865352630615, 0.0), (1.7868155241012573, 5.425797462463379, 0.0), (1.5726196765899658, 5.502791404724121, 0.0), (1.3592954874038696, 5.588473796844482, 0.0), (1.149243950843811, 5.703616619110107, 0.0), (0.9275898337364197, 5.782267093658447, 0.0), (0.7043974995613098, 5.876512050628662, 0.0), (0.47822171449661255, 6.000390529632568, 0.0), (0.24239158630371094, 6.092658519744873, 0.0), (-2.392927672190126e-05, 6.2078447341918945, 0.0)]
    error = 1000000
    deltaerror = 1000000
    threshold = 1e-16
    iter = 0
    max_iter = 15
    

    points_prime_t = np.array(points_prime_t)
    points_prime_t[:,2] = 1
    points_s_1 = np.array(points_s_1)
    points_s_1[:,2] = 1
    while error > threshold and max_iter > iter:
        fig, ax = plt.subplots(1,1)
        plt.setp(ax,xlim=[-1,8],ylim=[-10,10])
        points_prime_new,points_s,indices = outlierrejection(points_s_1,points_prime_t)
        x1, y1 = points_prime_t[:, :2].T
        x2, y2 = points_s[:, :2].T

        ax.scatter(x1,y1)
        ax.scatter(x2,y2)


        points_s_1 = np.array(points_s_1)

        points_s = np.array(points_s)

        points_prime_new = np.array(points_prime_new)

        mu_points = np.sum(points_s, axis=0)
        mu_points = mu_points / (np.shape(points_s)[0])
        mu_points_prime = np.sum(points_prime_new, axis=0)
        mu_points_prime = mu_points_prime / (np.shape(points_prime_new)[0])

        points_centre_s = points_s - mu_points
        points_prime_centre_new = points_prime_new - mu_points_prime



        M = np.dot(points_prime_centre_new.T,points_centre_s)

        U, W, V_t = np.linalg.svd(M)

        R = np.dot(U,V_t)


        T = mu_points_prime - np.dot(R,mu_points)

        A = np.identity(3)


        A[:2, :2] = R
        A[:2, 2] = T

        init_A = np.dot(init_A,A)

        points_s_1 = np.dot(points_s_1, A.T)

        new_error = 0
        for i in range(len(indices)):
            if indices!= -1:
                diff = points_s_1[i, :2] - points_prime_t[indices[i], :2]
                new_error = new_error + np.dot(diff, diff.T)

        new_error = new_error / float(np.shape(points_prime_new)[0])
        error = abs(new_error - deltaerror)

        deltaerror = new_error

        iter = iter + 1
        #plt.savefig("icpplotprime_r"+str(iter)+".png")
    print(init_A)


    print(iter)


main()

#print(timeit.timeit(stmt=main,number=1))